openapi: 3.0.3
info:
  title: RISK RADAR API
  version: "1.0.0"
servers:
  - url: https://risk-radar-production.up.railway.app
paths:
  /healthz:
    get:
      summary: Health check
      operationId: healthz
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }

  /api/scan-pr:
    get:
      summary: Scan PR risk signals
      operationId: scanPr
      parameters:
        - in: query
          name: owner
          required: true
          schema: { type: string }
          description: GitHub repository owner
        - in: query
          name: repo
          required: true
          schema: { type: string }
          description: GitHub repository name
        - in: query
          name: pr
          required: true
          schema: { type: integer, format: int32 }
          description: Pull Request number
      responses:
        "200":
          description: Scan result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PRScanResponse"

  /api/analyze-pr-performance:
    get:
      summary: Analyze PR performance impact (no benchmark)
      description: >
        벤치마크 없이 PR 메타데이터와 CI 신호로 성능 영향도를 추정합니다.
        Query 예: ?owner=Hwang9170&repo=Copilot_ai&pr=3
      operationId: analyzePrPerformance
      parameters:
        - in: query
          name: owner
          required: true
          schema: { type: string }
          description: GitHub repository owner
        - in: query
          name: repo
          required: true
          schema: { type: string }
          description: GitHub repository name
        - in: query
          name: pr
          required: true
          schema: { type: integer, format: int32 }
          description: Pull Request number
      responses:
        "200":
          description: Analysis result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyzePRPerformanceResponse"

components:
  schemas:
    PRScanResponse:
      type: object
      properties:
        owner: { type: string }
        repo: { type: string }
        pr: { type: integer }
        title: { type: string }
        state: { type: string, example: open }
        base: { type: string }
        draft: { type: boolean }
        score: { type: integer, description: 0-100 }
        grade: { type: string, example: B }
        signals:
          type: object
          properties:
            size_churn:
              type: object
              properties:
                additions: { type: integer }
                deletions: { type: integer }
                points: { type: integer }
            files_changed:
              type: object
              properties:
                count: { type: integer }
                points: { type: integer }
            sensitive_paths:
              type: object
              properties:
                count: { type: integer }
                points: { type: integer }
            secrets_in_diff:
              type: object
              properties:
                hits: { type: integer }
                points: { type: integer }
            gha_unpinned_actions:
              type: object
              properties:
                count: { type: integer }
                points: { type: integer }
            ci_failures:
              type: object
              properties:
                count: { type: integer }
                points: { type: integer }
            reviews_changes_requested:
              type: object
              properties:
                flag: { type: boolean }
                points: { type: integer }
            author_association:
              type: object
              properties:
                value: { type: string }
                points: { type: integer }
            age_days:
              type: object
              properties:
                value: { type: integer }
                points: { type: integer }

    AnalyzePRPerformanceResponse:
      type: object
      properties:
        ok: { type: boolean, example: true }
        pr: { type: integer }
        title: { type: string }
        complexity_analysis:
          type: object
          properties:
            impact_level: { type: string, enum: [low, medium, high] }
            complexity_score: { type: number, format: float }
            file_impact_score: { type: number, format: float }
            total_changes: { type: integer }
            changed_files: { type: integer }
        dependency_changes:
          type: array
          items:
            type: object
            properties:
              file: { type: string }
              additions: { type: integer }
              deletions: { type: integer }
              status: { type: string }
        file_type_analysis:
          type: object
          properties:
            source_code: { type: integer }
            config: { type: integer }
            documentation: { type: integer }
            tests: { type: integer }
            assets: { type: integer }
            total_files: { type: integer }
        ci_metrics:
          type: object
          properties:
            total_duration_ms: { type: integer }
            success_count: { type: integer }
            failure_count: { type: integer }
            total_checks: { type: integer }
            avg_duration_ms: { type: integer }
        performance_risk:
          type: object
          properties:
            risk_level: { type: string, enum: [low, medium, high] }
            risk_score: { type: number, format: float }
            factors:
              type: object
              properties:
                code_complexity: { type: number }
                dependency_changes: { type: number }
                ci_failures: { type: number }
                file_volume: { type: number }
        comment_markdown: { type: string }
        summary:
          type: object
          properties:
            risk_level: { type: string, enum: [low, medium, high] }
            risk_score: { type: number }
            recommendation: { type: string }
